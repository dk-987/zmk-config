// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#define ZMK_POINTING_DEFAULT_MOVE_VAL 2500  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define MAC 0
#define WIN 1
#define RIG 2
#define LEF 3
#define TRI 4
#define MOUSE 5

// https://zmk.dev/docs/development/hardware-integration/soft-off-setup?advanced-methods=wakeup&kscan-type=dkscan

/ {
    keys {
        compatible = "gpio-keys";

        soft_off_gpio_key: soft_off_gpio_key { gpios = <&gpio1 6 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>; };
    };

    wakeup_scan: wakeup_scan {
        compatible = "zmk,kscan-gpio-direct";
        input-keys = <&soft_off_gpio_key>;
        wakeup-source;
    };

    side_band_behavior_triggers: side_band_behavior_triggers {
        compatible = "zmk,kscan-sideband-behaviors";
        kscan = <&wakeup_scan>;
        auto-enable;
        wakeup-source;
    };

    soft_off_wakers {
        compatible = "zmk,soft-off-wakeup-sources";
        wakeup-sources = <&wakeup_scan>;
    };
};

/ {
    chosen { zmk,charmap = &charmap_us; };

    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <300>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <0>;      // 0
            time-to-max-speed-ms = <40>;      // 500
            delay-ms = <0>;                   // 10
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <12 11 10>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <18 19 17>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <0 1 2>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <8 7 9>;
        };

        caps_word {
            bindings = <&caps_word>;
            key-positions = <20 21 22>;
        };

        menu {
            bindings = <&kp C_MENU>;
            key-positions = <27 28 29>;
        };

        sticky_lctrl {
            bindings = <&sk LCTRL>;
            key-positions = <10 11>;
        };

        sticky_rctrl {
            bindings = <&sk RCTRL>;
            key-positions = <18 19>;
        };

        sticky_lshift {
            bindings = <&sk LSHFT>;
            key-positions = <0 1>;
        };

        sticky_rshift {
            bindings = <&sk RSHFT>;
            key-positions = <9 8>;
        };

        lalt {
            bindings = <&kp LEFT_ALT>;
            key-positions = <21 20>;
        };

        ralt {
            bindings = <&kp RIGHT_ALT>;
            key-positions = <28 29>;
        };

        f1-combo {
            bindings = <&kp F1>;
            key-positions = <11 13 12>;
        };

        f2-combo {
            bindings = <&kp F2>;
            key-positions = <1 2 3>;
        };

        f3-combo {
            bindings = <&kp F3>;
            key-positions = <22 21 23>;
        };

        f13-combo {
            bindings = <&kp F13>;
            key-positions = <16 17 18>;
        };

        f14-combo {
            bindings = <&kp F14>;
            key-positions = <6 7 8>;
        };

        f15-combo {
            bindings = <&kp F15>;
            key-positions = <26 27 28>;
        };

        lgui {
            bindings = <&sk LCMD>;
            key-positions = <31 30>;
        };

        rgui {
            bindings = <&sk RCMD>;
            key-positions = <33 32>;
        };

        layout_switch {
            bindings = <&tog 9>;
            key-positions = <32 31>;
        };

        printscreen {
            bindings = <&kp PRINTSCREEN>;
            key-positions = <30 33>;
        };

        Grave {
            bindings = <&kp GRAVE>;
            key-positions = <1 3>;
            layers = <9>;
        };

        right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <8 6>;
            layers = <9>;
        };

        layout_toggle {
            bindings = <&kp LG(SPACE)>;
            key-positions = <31 32>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp B             &kp F               &kp L           &kp K               &kp V          &kp P             &kp G       &kp O               &kp U                        &kp PERIOD
&mt LEFT_SHIFT N  &lt 5 S             &lt 1 H         &lt 3 T             &kp M          &kp C             &lt 4 Y     &lt 2 A             &lt 6 E                      &mt RIGHT_SHIFT I
&kp X             &mt LEFT_CONTROL Z  &mt LEFT_ALT J  &mt LEFT_COMMAND D  &kp Q          &kp SINGLE_QUOTE  &mt RCMD W  &mt LEFT_ALT SLASH  &mt RIGHT_CONTROL SEMICOLON  &kp COMMA
                                                      &kp ESCAPE          &lt 7 SPACE    &lt 8 R           &kp ENTER
            >;
        };

        func_layer {
            display-name = "FUNC";
            bindings = <
&trans  &trans  &trans  &trans  &trans    &kp F12  &kp F7  &kp F8  &kp F9  &trans
&trans  &trans  &trans  &trans  &trans    &kp F10  &kp F1  &kp F2  &kp F3  &kp BSPC
&trans  &trans  &trans  &trans  &trans    &kp F11  &kp F4  &kp F5  &kp F6  &kp ENTER
                        &trans  &trans    &trans   &trans
            >;
        };

        num_layer {
            display-name = "NUM";
            bindings = <
&kp SLASH     &kp N7        &kp N8        &kp N9        &kp PLUS     &trans  &trans         &trans  &trans  &trans
&kp N0        &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp MINUS    &tog 2  &kp RIGHT_ALT  &trans  &trans  &trans
&kp ASTERISK  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp EQUAL    &trans  &trans         &trans  &trans  &trans
                                          &trans        &trans       &trans  &trans
            >;
        };

        right_sym_layer {
            display-name = "SYM_RIGHT";
            bindings = <
&trans     &trans        &trans         &trans  &trans    &trans    &kp UNDERSCORE  &kp PIPE       &kp SINGLE_QUOTE   &trans
&kp CARET  &kp ASTERISK  &kp AMPERSAND  &trans  &trans    &kp HASH  &kp TILDE       &kp SLASH      &kp DOUBLE_QUOTES  &kp DOLLAR
&trans     &trans        &trans         &trans  &trans    &trans    &kp MINUS       &kp BACKSLASH  &kp GRAVE          &trans
                                        &trans  &trans    &trans    &trans
            >;
        };

        left_sym_layer {
            display-name = "SYM_LEFT";
            bindings = <
&trans          &kp COLON        &kp LESS_THAN         &kp GREATER_THAN       &kp SEMICOLON    &trans       &trans  &bt BT_SEL 0  &studio_unlock  &out OUT_TOG
&kp LEFT_BRACE  &kp RIGHT_BRACE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp AT_SIGN      &trans       &trans  &kp PLUS      &kp EQUAL       &kp PERCENT
&trans          &kp EXCLAMATION  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans           &trans       &trans  &bt BT_SEL 1  &soft_off       &bt BT_CLR
                                                       &trans                 &soft_off        &bootloader  &trans
            >;
        };

        nav_layer {
            display-name = "NAV";
            bindings = <
&trans  &trans  &trans  &trans  &trans              &kp LS(LA(TAB))  &kp LA(TAB)      &kp PG_UP      &kp LG(TAB)  &kp LG(LS(TAB))
&trans  &trans  &trans  &trans  &kp LEFT_CONTROL    &tog 5           &kp LEFT         &kp UP         &kp DOWN     &kp RIGHT
&trans  &trans  &trans  &trans  &trans              &kp LS(TAB)      &kp HOME         &kp PAGE_DOWN  &kp END      &kp TAB
                        &trans  &trans              &kp LC(TAB)      &kp LS(LC(TAB))
            >;
        };

        mouse_layer {
            bindings = <
&trans          &mkp RCLK       &msc SCRL_UP    &mkp LCLK        &trans    &trans     &trans  &trans  &trans  &trans
&mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP    &mmv MOVE_RIGHT  &tog 6    &kp RCTRL  &trans  &trans  &trans  &trans
&trans          &trans          &msc SCRL_DOWN  &trans           &trans    &trans     &trans  &trans  &trans  &trans
                                                &trans           &trans    &trans     &trans
            >;
        };

        combo_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans  &trans         &trans         &trans         &trans
&trans  &trans  &trans  &trans  &trans    &trans  &kp LS(LC(L))  &kp LS(LC(O))  &kp LS(LC(T))  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans         &trans         &trans         &trans
                        &trans  &trans    &trans  &trans
            >;
        };

        media_layer {
            bindings = <
&trans            &kp PRINTSCREEN  &kp SCROLLLOCK  &kp PAUSE_BREAK  &trans         &trans  &trans  &trans  &trans  &trans
&kp C_PLAY_PAUSE  &kp C_MUTE       &kp C_VOL_DN    &kp C_VOL_UP     &kp C_POWER    &trans  &trans  &trans  &trans  &trans
&trans            &kp C_AC_HOME    &kp C_AL_MAIL   &kp C_AL_CALC    &trans         &trans  &trans  &trans  &trans  &trans
                                                   &trans           &trans         &trans  &trans
            >;
        };

        QWERTY-JCUKEN {
            bindings = <
&kp Q             &kp W               &kp E           &kp R               &kp T          &kp Y               &kp U       &kp I               &kp O                     &kp P
&mt LEFT_SHIFT A  &lt 5 S             &lt 1 D         &lt 3 F             &kp G          &kp H               &lt 4 J     &lt 2 K             &lt 6 L                   &mt RIGHT_SHIFT SEMICOLON
&kp Z             &mt LEFT_CONTROL X  &mt LEFT_ALT C  &mt LEFT_COMMAND V  &kp B          &kp N               &mt RCMD M  &mt LEFT_ALT COMMA  &mt RIGHT_CONTROL PERIOD  &kp SLASH
                                                      &kp ESCAPE          &lt 7 SPACE    &lt 8 LEFT_BRACKET  &kp ENTER
            >;
        };
    };
};
